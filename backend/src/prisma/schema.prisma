generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String        @id @default(uuid())
  email         String        @unique
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  name          String
  emailVerified Boolean
  image         String?
  sessions      Session[]
  accounts      Account[]
  groups        GroupMember[]
  discussions   Discussion[]
  comments      Comment[]
  files         File[]
  resources     Resource[]
  invitations   Invitation[]
  joinRequests  JoinRequest[]

  @@map("user")
}

model Group {
  id           Int           @id @default(autoincrement())
  name         String
  description  String?
  members      GroupMember[]
  discussions  Discussion[]
  files        File[]
  resources    Resource[]
  private      Boolean       @default(false)
  password     String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  deletedAt    DateTime?
  invitations  Invitation[]
  joinRequests JoinRequest[]

  @@map("group")
}

enum Role {
  ADMIN
  MEMBER
}

model GroupMember {
  id       Int      @id @default(autoincrement())
  user     User     @relation(fields: [userId], references: [id])
  userId   String
  group    Group    @relation(fields: [groupId], references: [id])
  groupId  Int
  role     Role
  joinedAt DateTime @default(now())

  @@unique([userId, groupId])
  @@map("group_member")
}

model Discussion {
  id        Int       @id @default(autoincrement())
  title     String
  content   String?
  group     Group     @relation(fields: [groupId], references: [id])
  groupId   Int
  author    User      @relation(fields: [authorId], references: [id])
  authorId  String
  comments  Comment[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@map("discussion")
}

model Comment {
  id           Int        @id @default(autoincrement())
  content      String
  discussion   Discussion @relation(fields: [discussionId], references: [id])
  discussionId Int
  author       User       @relation(fields: [authorId], references: [id])
  authorId     String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  deletedAt    DateTime?

  @@map("comment")
}

model File {
  id           Int       @id @default(autoincrement())
  fileName     String
  url          String
  group        Group     @relation(fields: [groupId], references: [id])
  groupId      Int
  uploadedBy   User      @relation(fields: [uploadedById], references: [id])
  uploadedById String
  createdAt    DateTime  @default(now())
  deletedAt    DateTime?

  @@map("file")
}

model Resource {
  id          Int       @id @default(autoincrement())
  title       String
  description String?
  url         String?
  group       Group     @relation(fields: [groupId], references: [id])
  groupId     Int
  addedBy     User      @relation(fields: [addedById], references: [id])
  addedById   String
  createdAt   DateTime  @default(now())
  deletedAt   DateTime?

  @@map("resource")
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  DECLINED
  EXPIRED
}

model Invitation {
  id          Int              @id @default(autoincrement())
  email       String
  token       String           @unique
  status      InvitationStatus @default(PENDING)
  invitedBy   User             @relation(fields: [invitedById], references: [id])
  invitedById String
  group       Group            @relation(fields: [groupId], references: [id])
  groupId     Int
  expiresAt   DateTime
  acceptedAt  DateTime?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  deletedAt   DateTime?

  @@unique([email, groupId])
  @@map("invitation")
}

enum JoinRequestStatus {
  PENDING
  ACCEPTED
  DECLINED
}

model JoinRequest {
  id        Int               @id @default(autoincrement())
  user      User              @relation(fields: [userId], references: [id])
  userId    String
  group     Group             @relation(fields: [groupId], references: [id])
  groupId   Int
  message   String?
  status    JoinRequestStatus @default(PENDING)
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt

  @@unique([userId, groupId])
  @@map("join_request")
}

// Necessary for better-auth

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}
